image: docker.km3net.de/base/python:3

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  CONTAINER_TEST_IMAGE: docker.km3net.de/test/km3io:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: docker.km3net.de/km3io:$CI_COMMIT_TAG
  CONTAINER_LATEST_IMAGE: docker.km3net.de/km3io:latest
  SINGULARITY_RELEASE_IMAGE: km3io_${CI_COMMIT_TAG}.sif

cache:
  paths:
    - .cache/pip
  key: "$CI_COMMIT_REF_SLUG"

stages:
  - test
  - coverage
  - doc
  - docker
  - singularity
  - release

.virtualenv_template: &virtualenv_definition |
  python -V
  python3 -m venv venv
  source venv/bin/activate
  pip install -U pip setuptools wheel setuptools_scm
  hash -r
  pip freeze
  make install-dev
  pip freeze

.junit_template: &junit_definition
    artifacts:
      reports:
        junit: "reports/junit*.xml"

test-py3.6:
    image: docker.km3net.de/base/python:3.6
    stage: test
    script:
        - *virtualenv_definition
        - make test
    <<: *junit_definition

test-py3.7:
    image: docker.km3net.de/base/python:3.7
    stage: test
    script:
        - *virtualenv_definition
        - make test
    <<: *junit_definition

test-py3.8:
    image: docker.km3net.de/base/python:3.8
    stage: test
    script:
        - *virtualenv_definition
        - make test
    <<: *junit_definition

test-py3.9:
    image: docker.km3net.de/base/python:3.9
    stage: test
    script:
        - *virtualenv_definition
        - make test
    <<: *junit_definition

code-style:
    image: docker.km3net.de/base/python:3.9
    stage: test
    script:
        - *virtualenv_definition
        - make black-check
    allow_failure: true

coverage:
    image: docker.km3net.de/base/python:3.9
    stage: coverage
    script:
        - *virtualenv_definition
        - make install-dev
        - "make test-cov|grep TOTAL| awk '{printf \"COVERAGE: %.2f%%\", (1-$3/$2)*100 }'"
    coverage: '/COVERAGE:\s*([0-9]*\.[0-9]*%)/'
    #     - make test-cov
    # coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
    artifacts:
        paths:
            - reports/coverage


build-docs:
    image: docker.km3net.de/base/python:3.9
    stage: doc
    script:
        - *virtualenv_definition
        - cd doc && make clean && make html
    cache: {}

pages:
    image: docker.km3net.de/base/python:3.9
    stage: doc
    script:
        - *virtualenv_definition
        - cd doc && make clean && make html
        - mv _build/html ../public/
        - cd .. && mv reports/coverage public/coverage
    artifacts:
        paths:
            - public
    cache: {}
    only:
        - tags
        - master


docker:
  image: docker:stable
  services:
    - docker:dind
  stage: docker
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  tags:
    - docker
  only:
    - tags


pypi:
    image: docker.km3net.de/base/python:3.9
    stage: release
    cache: {}
    script:
        - pip install -U twine wheel setuptools_scm
        - python setup.py sdist
        - python setup.py bdist_wheel
        - twine upload dist/*
    only:
        - tags

cc-lyon:
    image: docker.km3net.de/base/ci-helper:1
    stage: release
    script:
        - mkdir -p /root/.ssh && chmod 700 /root/.ssh
        - ssh-keyscan -H $IN2P3_HOST > ~/.ssh/known_hosts
        - chmod 600 /root/.ssh/known_hosts
        - sshpass -p $IN2P3_PASSWORD ssh -v $IN2P3_USERNAME@$IN2P3_HOST 'export KM3NET_THRONG_DIR=/pbs/throng/km3net; export MODULEPATH=/pbs/throng/km3net/modulefiles; . /usr/share/Modules/init/bash; module load km3net_env; module load python/3.7.5; pip install git+https://git.km3net.de/km3py/km3io.git'
    only:
        - tags
        - master
    allow_failure: true

release-docker:
  image: docker:stable
  services:
    - docker:dind
  stage: release
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_LATEST_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_LATEST_IMAGE
  tags:
    - docker
  only:
    - tags

release-singularity:
  image: docker.km3net.de/base/singularity:3.6.2
  stage: release
  script:
    - singularity build $SINGULARITY_RELEASE_IMAGE docker://$CONTAINER_TEST_IMAGE
    - du -sh $SINGULARITY_RELEASE_IMAGE
    - mkdir -p ~/.ssh && ssh-keyscan -H -t rsa $KM3NET_SFTP_HOST  >> ~/.ssh/known_hosts
    - apt install -q lftp
    - lftp -u $KM3NET_SFTP_USER,$KM3NET_SFTP_PASSWORD sftp://$KM3NET_SFTP_HOST -e "set ssl:verify-certificate no; cd singularity/; put $SINGULARITY_RELEASE_IMAGE; bye"
  only:
    - tags
